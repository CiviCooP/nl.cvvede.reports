<?php

class CRM_Reports_Form_Report_Buddies extends CRM_Report_Form_Contact_Summary {

  /**
   * Class constructor.
   */
  public function __construct() {
    parent::__construct();
    $this->_columns['civicrm_contact']['fields']['created_date'] = array(
      'title' => ts('Created Date'),
      'default' => FALSE,
    );
    $this->_columns['civicrm_contact']['fields']['relationships'] = array(
      'title' => ts('Relationships'),
      'pseudofield' => TRUE,
    );
    $this->_columns['civicrm_contact']['order_bys']['created_date'] = array(
      'name' => 'created_date',
      'title' => ts('Created Date'),
    );
  }

  public function select() {
    $select = array();
    $this->_columnHeaders = array();
    foreach ($this->_columns as $tableName => $table) {
      if (array_key_exists('fields', $table)) {
        foreach ($table['fields'] as $fieldName => $field) {
          if (!empty($field['pseudofield'])) {
            continue;
          }
          if (!empty($field['required']) ||
            !empty($this->_params['fields'][$fieldName])
          ) {
            if ($tableName == 'civicrm_email') {
              $this->_emailField = TRUE;
            }
            elseif ($tableName == 'civicrm_phone') {
              $this->_phoneField = TRUE;
            }
            elseif ($tableName == 'civicrm_country') {
              $this->_countryField = TRUE;
            }

            $alias = "{$tableName}_{$fieldName}";
            $select[] = "{$field['dbAlias']} as {$alias}";
            $this->_columnHeaders["{$tableName}_{$fieldName}"]['type'] = CRM_Utils_Array::value('type', $field);
            $this->_columnHeaders["{$tableName}_{$fieldName}"]['title'] = $field['title'];
            $this->_selectAliases[] = $alias;
          }
        }
      }
    }

    $this->_select = "SELECT " . implode(', ', $select) . " ";
  }

  public function modifyColumnHeaders() {
    if (!empty($this->_params['fields']['relationships'])) {
      $this->_columnHeaders['relationships'] = array(
        'title' => ts('Relationships'),
      );
    }
  }


  /**
   * Alter display of rows.
   *
   * Iterate through the rows retrieved via SQL and make changes for display purposes,
   * such as rendering contacts as links.
   *
   * @param array $rows
   *   Rows generated by SQL, with an array for each row.
   */
  public function alterDisplay(&$rows) {
    $entryFound = FALSE;

    foreach ($rows as $rowNum => $row) {
      // make count columns point to detail report
      // convert sort name to links
      if (array_key_exists('civicrm_contact_sort_name', $row) &&
        array_key_exists('civicrm_contact_id', $row)
      ) {

        $url = CRM_Utils_System::url('civicrm/contact/view',
          'reset=1&cid=' . $row['civicrm_contact_id'],
          $this->_absoluteUrl
        );
        $rows[$rowNum]['civicrm_contact_sort_name_link'] = $url;
        $rows[$rowNum]['civicrm_contact_sort_name_hover'] = ts('View Contact Summary for this Contact');
        $entryFound = TRUE;
      }

      if (array_key_exists('civicrm_address_state_province_id', $row)) {
        if ($value = $row['civicrm_address_state_province_id']) {
          $rows[$rowNum]['civicrm_address_state_province_id'] = CRM_Core_PseudoConstant::stateProvince($value, FALSE);
        }
        $entryFound = TRUE;
      }

      if (array_key_exists('civicrm_address_country_id', $row)) {
        if ($value = $row['civicrm_address_country_id']) {
          $rows[$rowNum]['civicrm_address_country_id'] = CRM_Core_PseudoConstant::country($value, FALSE);
        }
        $entryFound = TRUE;
      }

      // Handle ID to label conversion for contact fields
      $entryFound = $this->alterDisplayContactFields($row, $rows, $rowNum, 'contact/summary', 'View Contact Summary') ? TRUE : $entryFound;

      // display birthday in the configured custom format
      if (array_key_exists('civicrm_contact_birth_date', $row)) {
        $birthDate = $row['civicrm_contact_birth_date'];
        if ($birthDate) {
          $rows[$rowNum]['civicrm_contact_birth_date'] = CRM_Utils_Date::customFormat($birthDate, '%Y%m%d');
        }
        $entryFound = TRUE;
      }

      if (!empty($this->_params['fields']['relationships']) && array_key_exists('civicrm_contact_id', $row)) {
        $relationships = civicrm_api3('Relationship', 'get', array('contact_id' => $row['civicrm_contact_id'], 'status_id' => 3));
        $relationshipsText = '';
        foreach($relationships['values'] as $relationship) {
          $url = CRM_Utils_System::url('civicrm/contact/view', 'reset=1&cid=' . $relationship['cid'], $this->_absoluteUrl);
          if (strlen($relationshipsText)) {
            $relationshipsText .= '<br>';
          }

          $age = '';
          $contact = civicrm_api('Contact', 'getsingle', array('id' => $relationship['cid'], 'version' => '3'));
          if (!empty($contact['birth_date'])) {
            $birthDate = new DateTime ($contact['birth_date']);
            $age = $birthDate->diff(new DateTime('now'))->y;
            $age = ' ('.$age.')';
          }

          $relationshipsText .= $relationship['relation'] . '&nbsp;'.'<a href="'.$url.'">'.$relationship['display_name'].$age.'</a>';
          $rows[$rowNum]['relationships'] = $relationshipsText;
        }
      }

      // skip looking further in rows, if first row itself doesn't
      // have the column we need
      if (!$entryFound) {
        break;
      }
    }
  }

}
